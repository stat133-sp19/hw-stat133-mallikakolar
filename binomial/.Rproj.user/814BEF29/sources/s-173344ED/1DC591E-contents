---
title: "Introduction"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Introduction}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup}
library(binomial)
```

This binomial package contains functions to help calculate probabilites of a binomial random variable.  

This package has main functions and methods (to be called by the user) and private functinos (not to be called by the user)

A simple example of a binomial random variable involves th bumber of Heads you get when tossing a coin a specific number of times.  

- example with a fair coin: `P(X = 3 heads in 4 tosses, with a 50% chance of getting heads)`    
- example without a fair coin: `P(X = 3 heads in 4 tosses, with a 75% chance of getting heads)`    

---

##Summary measures-- Private Auxiliary Functions
There are many **Summary measures** that can be used to look at a random variable X.

**aux_mean()**

- Returns the mean of a binomial random variable, given the number of trials and the probability of success on each trial. The mean, or expected value, of a binomial distribution is the expected number of successes in a fixed number of trials
- Usage
    - `aux_mean(trials, prob)`
- Arguments    
    - *trials*: an integer or double that gives the number of trials  
    - *prob*: an integer or double that gives the probability of success
- Example  
    - `aux_mean(10, 0.3)`

**aux_variance()**

- Returns the variance, given the number of trials and the probability of success.  
- Usage  
    - `aux_variance(trials, prob)`
- Arguments  
    - *trials*: an integer or double that gives the number of trials  
    - *prob*: an integer or double that gives the probability of success
- Example
    - `aux_variance(10, 0.3)`

**aux_mode()**

- Returns the mode, given the number of trials and the probability of success. If the number of trials is even, the function returns one mode value. If the number of trials is odd, the function returns two mode values. The mode is the most likely number of success in a fixed number of trials with probability of success on each trial.
- Usage 
    - `aux_mode(trials, prob)`
- Arguments  
    - *trials*: an integer or double that gives the number of trials  
    - *prob*: an integer or double that gives the probability of success
- Example
    - `aux_mode(10, 0.3)`

**aux_skewness()**

- Returns the skewness, given the number of trials and the probability of success. Skewness is a measure of the asymmetry of the probability distribution of a random variable about its mean. 
-Usage  
    - `aux_skewness(trials, prob)`
- Arguments  
    - *trials*: an integer or double that gives the number of trials  
    - *prob*: an integer or double that gives the probability of success
- Example
    - `aux_skewness(10, 0.3)`

**aux_kurtosis()**

- Returns the kurtosis, given the number of trials and the probability of success. Kurtosis can be used to describe the shape of a probability distribution.  
- Usage  
    - `aux_kurtosis(trials, prob)`
- Arguments  
    - *trials*: an integer or double that gives the number of trials  
    - *prob*: an integer or double that gives the probability of success
- Example
    - `aux_kurtosis(10, 0.3)`
    
---

## Checker Functions-- Private Auxiliary Functions
These **checker function** makes sure user inputs meet certain criteria in order for the binomial package functions to work correctly

**check_prob()**

- Returns TRUE is the value of value of prob (probability) is between 0 and 1, inclusive. Otherwise, the function with stop and porduce a warning. 
- Usage
    - `check_prob(prob)`
- Arguments    
    - *prob*: an integer or double that gives the probability of success

**check_trials()**

- Returns TRUE is the value of trials is a non-negative number (greater than or equal to 0). Otherwise, the function with stop and porduce a warning.  
- Usage
    - `check_trials(trials)`
- Arguments  
    - *trials*: an integer or double that gives the number of trials  

**check_success()**

- Returns TRUE if all values in success are non-negative, and if success is less than trialss. Otherwise, the function with stop and porduce a warning.   
- Usage  
    - `check_success(success, trials)`  
- Arguments  
    - *trials*: an integer or double that gives the number of trials  
    - *success*: a vector that gives the number of successes  

---

## Main Functions
The **main functinos** utilize both the **checker functions** and **summary functions** to compute various binomial calculations.

**bin_choose()**

- Calculates and returns the number of combinations in which k successes can occur in n trials.    
- The function will return an error if criteria is not met: k successes must be less than n trials 
-Usage  
    - `bin_choose(n, k)`
- Arguments  
    - *n*: an integer that gives the number of trials  
    - *k*: an integer that gives the number of success
- Example
    - `bin_choose(n = 5, k = 2)`  
    - `bin_choose(5, 0)`  
    - `bin_choose(5, 1:3)`

**bin_probability()**

- Calculates and returns the binomial probability of having a number of successes in a fixed amount of trials. 
- The function will return an error if the arguments do not meet the criteria.
- Usage  
    - `bin_probability(success, trials, prob)`
- Arguments  
    - *success*: an integer that gives the number of trials  
    - *trials*: an integer that gives the number of success  
    - *prob*: an integer that gives the probability of success
- Example
    - `bin_probability(success = 2, trials = 5, prob = 0.5)`  
    - `bin_probability(success = 0:2, trials = 5, prob = 0.5)`  
    - `bin_probability(success = 55, trials = 100, prob = 0.45)`

**bin_distribution()**

- Returns a dataframe with the probability distribution. The columns contain the number of successes and respective binomial probabilities.  
- Dataframe contains the '*bindis*' class
- Usage  
    - `bin_distribution(trials, prob)` 
- Arguments  
    - *trials*: an integer that gives the number of success  
    - *prob*: an integer that gives the probability of success
- Example
    - `bin_distribution(trials = 5, prob = 0.5)`
```{r, echo = FALSE}
bin_distribution <- function(trials, prob){
  prob_vec <- bin_probability(success = 0:trials, trials = trials, prob = prob)
  prob_df <- data.frame(success = c(0:trials), probability = prob_vec)
  class(prob_df) <- c("bindis", "data.frame")
  return(prob_df)
}
bin_distribution(trials = 5, prob = 0.5)
```
- Contains *method* **plot.bindis()** that graphs a barplot to display the probability histogram of a binomial distribution object '*bindis*'.
```{r, echo = FALSE}
plot.bindis <- function(dat){
  barplot(dat$probability, ylab = 'probability', xlab = 'successes')
}
```
```{r}
plot(bin_distribution(trials = 5, prob = 0.5))
```
  
**bin_cumulative()**

- Returns a dataframe with the probability distribution and the cumulative probabilities.  
- Dataframe containts the '*bincum*' class
-  Usage  
    - 'bin_cumulative(trials, prob)'  
- Arguments  
    - *trials*: an integer that gives the number of success  
    - *prob*: an integer that gives the probability of success
- Example
    - `bin_cumulative(trials = 5, prob = 0.5)`
  
```{r, echo = FALSE}
bin_cumulative <- function(trials, prob){
  test <- bin_probability(success = 0:trials, trials = trials, prob = prob)
  cum_sum <- cumsum(test)
  dframe <- data.frame(success = c(0:trials), probability = test, cumulative = cum_sum)
  class(dframe) <- c("bincum", "data.frame")
  return(dframe)
}
bin_cumulative(trials = 5, prob = 0.5)
```
- Contains *method* **plot.bincum()** that plots the cumulative probabilities of a binomial distribution object '*bincum*'.
```{r, echo = FALSE}
plot.bincum <- function(dat){
  plot(dat$cumulative, ylab = 'cumulative', xlab = 'successes')
  lines(dat$cumulative)
}
```
```{r}
plot(bin_cumulative(trials = 5, prob = 0.5))
```

**bin_variable()**
 
- Returns a binomial random variable object with a list of named elements.  
- It containts the '*binvar*' class.
- Usage  
    - `bin_variable(trials, prob)`  
- Arguments  
    - *trials*: an integer that gives the number of success  
    - *prob*: an integer that gives the probability of success
- Example
    - `bin_variable(trials = 10, prob = 0.3)`  
    

```{r, echo = FALSE}
check_trials <- function(trials){
  if (trials >= 0){
    return(TRUE)
  } else {
    stop('invalid trials value')
  }
}

check_prob <- function(prob) {
  if (prob <= 1 & prob >= 0){
    return(TRUE)
  } else {
    stop('invalid prob value: prob has to be between 0 and 1')
  }
}

bin_variable <- function(trials, prob){
  check_trials(trials = trials)
  check_prob(prob = prob)
  bin_list <- list(trials = trials, prob = prob)
  class(bin_list) <- "binvar"
  return(bin_list)
}
```
- Contains *method* **print.binvar()** that prints the contents of an object '*binvar*'.  
```{r}
bin_variable(trials = 10, prob = 0.3)
```
- Contains *method* **summary.binvar()** that prints the contents of an object.
```{r}
summary(bin_variable(trials = 10, prob = 0.3))
```

**bin_mean()**
 
- Returns the binomial mean.   
- Will return an error if arguments are not valid.
- Usage  
    - `bin_mean(trials, prob)`
- Arguments  
    - *trials*: an integer that gives the number of success  
    - *prob*: an integer that gives the probability of success
- Example
    - `bin_mean(10, 0.3)`

**bin_variance()**

- Returns the binomial variance.  
- Will return an error if arguments are not valid.
- Usage  
    - `bin_variance(trials, prob)`
- Arguments  
    - *trials*: an integer that gives the number of success  
    - *prob*: an integer that gives the probability of success
- Example
    - `bin_variance(10, 0.3)`

**bin_mode()**

- Returns the binomial mode.   
- Will return an error if arguments are not valid.
- Usage  
   - `bin_mode(trials, prob)`
- Arguments  
    - *trials*: an integer that gives the number of success  
    - *prob*: an integer that gives the probability of success
- Example
    - `bin_mode(10, 0.3)`

**bin_skewness()**

- Returns the binomial skewness.   
- Will return an error if arguments are not valid.
-  Usage  
    - `bin_skewness(trials, prob)`
- Arguments  
    - *trials*: an integer that gives the number of success  
    - *prob*: an integer that gives the probability of success
- Example
    - `bin_skewness(10, 0.3)`

**bin_kurtosis()**

- Returns the binomial kurtosis.   
- Will return an error if arguments are not valid.
- Usage  
    - `bin_kurtosis(trials, prob)`
- Arguments  
    - *trials*: an integer that gives the number of success  
    - *prob*: an integer that gives the probability of success
- Example
    - `bin_kurtosis(10, 0.3)`






